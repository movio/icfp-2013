import Interpreter._

object OperatorPermuter extends App {

  val ops = List(Shl1(PlaceHolder), Not(PlaceHolder), Shr4(PlaceHolder))

  def perms(partial: List[Expr], ops: List[Expr]): Stream[List[Expr]] = {

    if (ops.isEmpty) Stream(partial)
    else {
      val validOps = ops.distinct.filter { op ⇒ size(op) <= partial.size }

      val nextIter = validOps map {
        case PlaceHolder ⇒ (PlaceHolder :: partial, ops diff List(PlaceHolder))
        case e: Not      ⇒ (Not(partial.head) :: partial.tail, ops diff List(e))
        case e: Shl1     ⇒ (Shl1(partial.head) :: partial.tail, ops diff List(e))
        case e: Shr1     ⇒ (Shr1(partial.head) :: partial.tail, ops diff List(e))
        case e: Shr4     ⇒ (Shr4(partial.head) :: partial.tail, ops diff List(e))
        case e: Shr16    ⇒ (Shr16(partial.head) :: partial.tail, ops diff List(e))

        case e: And ⇒ partial match {
          case e1 :: e2 :: rest ⇒ (And(e1, e2) :: rest, ops diff List(e))
        }
        case e: Or ⇒ partial match {
          case e1 :: e2 :: rest ⇒ (Or(e1, e2) :: rest, ops diff List(e))
        }
        case e: Xor ⇒ partial match {
          case e1 :: e2 :: rest ⇒ (Xor(e1, e2) :: rest, ops diff List(e))
        }
        case e: Plus ⇒ partial match {
          case e1 :: e2 :: rest ⇒ (Plus(e1, e2) :: rest, ops diff List(e))
        }

        case e: If0 ⇒ partial match {
          case e1 :: e2 :: e3 :: rest ⇒ (If0(e1, e2, e3) :: rest, ops diff List(e))
        }

        case e: Fold ⇒ partial match {
          case e1 :: e2 :: e3 :: rest ⇒ (Fold(e1, e2, Lambda2(Id("y"), Id("z"), e3)) :: rest, ops diff List(e))
        }
      }

      nextIter.foldLeft(Stream.empty[List[Expr]]) { (acc, next) ⇒
        val (partial, ops) = next
        if (partial.head == PlaceHolder)
          perms(Value(0) :: partial.tail, ops) #:::
          perms(Value(1) :: partial.tail, ops) #:::
          perms(Id("x") :: partial.tail, ops) #:::
          acc
        else
          perms(partial, ops) #::: acc
      }
    }
  }

  def size(e: Expr) = e match {
    case PlaceHolder ⇒ 0
    case _: Not      ⇒ 1
    case _: Shl1     ⇒ 1
    case _: Shr1     ⇒ 1
    case _: Shr4     ⇒ 1
    case _: Shr16    ⇒ 1
    case _: And      ⇒ 2
    case _: Or       ⇒ 2
    case _: Xor      ⇒ 2
    case _: Plus     ⇒ 2
    case _: If0      ⇒ 3
    case _: Fold     ⇒ 3 // 3 expressions, so 3, not 4
  }

  println("starting")
  val start = System.nanoTime

  val stuff = perms(Nil,
    List(
      If0(PlaceHolder, PlaceHolder, PlaceHolder),
      And(PlaceHolder, PlaceHolder),
      Plus(PlaceHolder, PlaceHolder),
      Shr1(PlaceHolder),
      PlaceHolder,
      PlaceHolder,
      PlaceHolder,
      PlaceHolder,
      PlaceHolder
    )
  )

//  val stuff = perms(Nil,
//    List(
//      Fold(PlaceHolder, PlaceHolder, Lambda2(Id("y"), Id("z"), PlaceHolder)),
//      Xor(PlaceHolder, PlaceHolder),
//      Shl1(PlaceHolder),
//      Shr16(PlaceHolder),
//      Shr16(PlaceHolder),
//      Shr4(PlaceHolder),
//      Shr4(PlaceHolder),
//      PlaceHolder,
//      PlaceHolder,
//      PlaceHolder,
//      PlaceHolder
//    )
//  )

  //stuff foreach println
  val real = stuff map { list ⇒ Lambda1(Id("x"), list.head) }
  val duration = System.nanoTime - start
  println(f"duration: ${duration / 1000000.0}%.02fms")


  println("running test program")

  val inputs = List(0x55c3aedf9535800aL,0x32bd8b75dd380d89L, 0xc49a91000a3685adL,0x6384ffa070280b2dL,0x6d7766201c1f3b88L,
    0xf650b5fc4cc34325L,0x3f74b1eb3f2e93cfL,0xcae6d8a335b4820fL, 0x2dc29af3a403523L,0xc7f15889d1b0eeacL,0x1180c262f16c0a48L,
    0xdf9d52c760702b2L,0x449d1aeb6fe2991bL,0xe149da64f8e3bcdfL, 0x29b7c698b1c354c2L,0x7f698a13cf06051L,0x68233bf6e0c95f25L,
    0xc42d7b34ef3c5514L,0x1dc76bc2a37e6d9cL,0x3449410c538bfdfcL, 0xa83f443a3d6ac4e8L,0x8d7b86635e97b5L,0x1f34a4993ab48067L,
    0x43e0979bae8a7518L,0xca8984e05a0f9883L,0x57bad546aa702cbfL, 0x328555d830035c6bL,0xe02d12193ba8bdbL,0x6629dd575da15305L,
    0x43f6844cefaa6244L,0x9c4312c22614b723L,0x11c9de94a24a7bd1L, 0xaf9bfd4213102f4L,0x9925ed097d95ae9L,0x5fe8e99ce0993ebcL,
    0x7fa94d8e1e7b885aL,0x943245cbb08106c7L,0x1d247dee4b228c69L, 0x5d0e403077a37c9bL,0x8c9fb8cc7ec1e529L,0x6618547adb1b976cL,
    0xd88f362448ac8e10L,0xf60c048a58c87d4L,0xa2f5c8b23d8aecc6L, 0x1258d1606cc022c3L,0x2edf9fd7c1023740L,0x363f543928cc87b3L,
    0xdeacc3c46023a70dL,0xe306e6bef3317620L,0x4d44afd1f54b0defL, 0xb108335536710637L,0x25feaf2df8799fadL,0x186e581deeaeb8cdL,
    0xdda0dfbcc2b30527L,0xad6bfe77251b1292L,0x1891ff3d24b00cabL, 0x3a2be6c7e9a13686L,0xed7866aa129b8b86L,0xdd57ec7bcbaf33aaL,
    0x242d7e2b4c344dcL,0xb83dc64d3b48f9fbL,0x523e018d616fe9bcL, 0xca4906c38a212a9bL,0xf8a3dd36abb4866eL,0x3cfe210028723751L,
    0xc2404bbf2f36f10fL,0x841a75b496058533L,0x4c9893f346f80d5fL, 0x7d39ac76ac7d86a1L,0xbfb9a779b63bf9d9L,0xd9a0dd37efd30075L,
    0x83ab51f5141f7a04L,0x7d44e0f7444ee78L,0xe1c4b65fb5693209L, 0x1a4c93a58fdbb17L,0x1f00bebde1fa8784L,0x92adcf667ba7be56L,
    0xfd3761f5752d3b9eL,0x1b0e2a2cbe563803L,0x900ae3f607a8125bL, 0x86b8a2df4dc7392fL,0x2da674206f061b30L,0x3352e183cd5630daL,
    0xdd5dcde591516ed8L,0x1974b8211f3e0fedL,0xc513bfae290b7667L, 0x927a5e39d645386cL,0xa447bbfc5f8a0f9fL,0x16406097d8dcabebL,
    0xb708d8cee8122281L,0xe448494bb05f2d41L,0x560ee14b2b8d7c27L, 0x963143f2b0b4497bL,0x2a205d96d44302d0L,0x7660423a10667c13L,
    0xc9f6b507afd5973cL,0x496764a41e7ae262L,0x793fce7e0d3f373aL, 0x2b74ab89a54c3252L,0x7f6ed30de9c3357eL,0xa10c3462cf91e857L,
    0x1403f6e0f42b9ab8L,0xf3d2874559d7e09fL,0x360d6c5a865303e1L, 0x1d6fb8abbe39cf87L,0x5c21e57ea33d91d7L,0x93dc63794d794d51L,
    0xd33747911118be2cL,0x3ff5bf3bb6bc6914L,0xd3be74fc23a3293aL, 0x414656b571adf6f3L,0xe797517669fab57aL,0x24c5229764980d91L,
    0xaefe646173e08415L,0x28250c903ca466c4L,0x88c7bd745b67a6bbL, 0x946b1e8578f59788L,0x2150ff99d9fc9ab4L,0x3921e2218d075335L,
    0x9dceb618e800e134L,0x71e4b4909af32df4L,0x8d3757f74e1748f2L, 0xba661287ae1a926fL,0x2f509d980bf2bcfbL,0xc5c02088998ddec7L,
    0x138a0cab0342acc2L,0xf50ef3656693dccaL,0xc699de473b75617cL, 0x4b485d00c6340965L,0xdd7fa35035b9d4aaL,0x13d415c1fd95f57L,
    0x68e24b1edd2fdbf7L,0x50ecb7d0764a9927L,0xe2f570616ecebe43L, 0x23117c977e901e58L,0x466c103f5c7785ffL,0xf1567690692f0fdaL,
    0xdcbd0fbf6029a4bbL,0x6327554338a427c2L,0xc760336934a5bbfcL, 0x26de8b223780603dL,0x88f06d2d51339f52L,0xd622810903495c2L,
    0x3a8aa48383fde3aaL,0xff555827ffb89886L,0x658e5cd3dac68fe0L, 0x891c8ab69e0d6135L,0xc57de1849ddc298L,0x424e858a3b615cdeL,
    0x8be1c3c0567c614eL,0x8e0ce86c8199042eL,0x16b615d5713224aaL, 0x3062e4f2076d31e0L,0x6575505ff8379618L,0x11712e709f73ec74L,
    0x4cbbfd0c2d69d298L,0x9e1a664f317f971eL,0x8995c30a01bf26d2L, 0x67538883530bbe01L,0xbf371133fd60d86cL,0x91701c560b2df19cL,
    0x30a4c673e187b0a0L,0xfbfa2d68daf46584L,0xb9837c66dcfe1c08L, 0xb52250fc5b834653L,0x50be583c5703f3bcL,0xb9d43b6bd2dcfae0L,
    0x804f85e1cb7d439eL,0x6940a9fcc650c4afL,0xa572c161e816a1f3L, 0xa875a4da414e73abL,0xe2c9287d19eec36L,0xf4aa5d58a8152112L,
    0x9a971ec90c7f7d28L,0x91742c821a9e25b0L,0x40fb5602039302bL, 0x5f6e75d0b484bf4fL,0x506e79b9755dc5d0L,0x8037723b1dbe196dL,
    0xe623d012b4e27daeL,0xca40276d9cfcad2fL,0xb5ad705fc021f975L, 0xc20e0f5d1ad52c96L,0xa78f436f2fb0bd42L,0xab7133faa36a6cf0L,
    0x21a6e4bb588e134L,0xa419c34606c90490L,0x7a0f2fe62a46c83eL, 0x36245f8645728fc0L,0xb2cc74f1ee79f03eL,0x8ce4afd5ba23d0f6L,
    0xd08a460f6daa2f4eL,0x54a9f4e31ae02046L,0x874a742b59e2f25aL, 0x37b1a5f2dcffde18L,0x85fd2723d99b50f3L,0xb385a2899a6dd1aL,
    0xe50d32b1a7eb0a61L,0xc7d982064ce2f777L,0x24625582ad69bffeL, 0xcc72b532b1024348L,0x7525c6a7101700c1L,0x22c7987d3cb39a4bL,
    0x5977b52e277efa19L,0x456fa01f147b68d2L,0xc60a9e0f4138e1fbL, 0x7f6732476a31f7fdL,0xc1839c4b1e196e3eL,0x6b31edd29edfa72bL,
    0x39cd17508b44ed26L,0x6214195b079ec8adL,0x527b73a448f1d33dL, 0x1fc57e736c7215bcL,0x8f39a9ba7c65d269L,0x4c6035316379edadL,
    0xdc2de72770c4ce3bL,0x997223ec2ae1d462L,0xe2a49dfa3bea4184L, 0x40403746eb82e403L,0x4452a6669efae92eL,0xd2b6966ca4cf25eeL,
    0x196556a4e6e5c848L,0xd671579ce36506ebL,0x5fa1b518b4e8d962L, 0xadfd78e7bde95aa4L,0x494228b4139f011aL,0x102a21390ab9a253L,
    0x8b544b97876215f6L,0x243e6d95ebef8abdL,0xd34ec4016a251175L, 0x3c684ea47949d55eL,0x74b14761b897be60L,0xc9fd3a6fb81e20e5L,
    0x97ff2bcdf1a67865L,0x416db66c2bba44e2L,0xce872b990f7dd0e5L, 0x3258fdb6fbd334bdL,0xe0713f3f4b632d0cL,0x5b3e47a0160a9de9L,
    0xeb5b182f930b122L,0x3c1d726c5a73b55aL,0x572ed1da95540d20L, 0xe83116571492e834L,0xb028e90b3614fe86L,0x210844d7f1db63c4L,
    0xb0ea540f17e19b6bL,0x2ce67828bf68a8b3L,0xdfe7e93d71abbad5L, 0x33b4770659e19d78L,0x73f80bab33440e4aL,0x113530b3f755d40eL,
    0xee1910cca954c0a6L,0x94ddd543d2bcf6e7L,0xa385dc633a66ae2fL, 0xb7e0ae17fecb911fL,0x561dd690d37989e6L, 0, 1, 0xFFFFFFFFFFFFFFFFL)

  val outputs = List(0x55C3AEDF9535800AL, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x6D7766201C1F3B88L,
    0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0xC7F15889D1B0EEACL, 0x1180C262F16C0A48L,
    0x0DF9D52C760702B2L, 0x0000000000000001L, 0x0000000000000001L, 0x29B7C698B1C354C2L, 0x0000000000000001L, 0x0000000000000001L,
    0xC42D7B34EF3C5514L, 0x1DC76BC2A37E6D9CL, 0x3449410C538BFDFCL, 0xA83F443A3D6AC4E8L, 0x0000000000000001L, 0x0000000000000001L,
    0x43E0979BAE8A7518L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L,
    0x43F6844CEFAA6244L, 0x0000000000000001L, 0x0000000000000001L, 0x0AF9BFD4213102F4L, 0x0000000000000001L, 0x5FE8E99CE0993EBCL,
    0x7FA94D8E1E7B885AL, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x6618547ADB1B976CL,
    0xD88F362448AC8E10L, 0x0F60C048A58C87D4L, 0xA2F5C8B23D8AECC6L, 0x0000000000000001L, 0x2EDF9FD7C1023740L, 0x0000000000000001L,
    0x0000000000000001L, 0xE306E6BEF3317620L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L,
    0x0000000000000001L, 0xAD6BFE77251B1292L, 0x0000000000000001L, 0x3A2BE6C7E9A13686L, 0xED7866AA129B8B86L, 0xDD57EC7BCBAF33AAL,
    0x0242D7E2B4C344DCL, 0x0000000000000001L, 0x523E018D616FE9BCL, 0x0000000000000001L, 0xF8A3DD36ABB4866EL, 0x0000000000000001L,
    0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L,
    0x83AB51F5141F7A04L, 0x07D44E0F7444EE78L, 0x0000000000000001L, 0x0000000000000001L, 0x1F00BEBDE1FA8784L, 0x92ADCF667BA7BE56L,
    0xFD3761F5752D3B9EL, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x2DA674206F061B30L, 0x3352E183CD5630DAL,
    0xDD5DCDE591516ED8L, 0x0000000000000001L, 0x0000000000000001L, 0x927A5E39D645386CL, 0x0000000000000001L, 0x0000000000000001L,
    0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x2A205D96D44302D0L, 0x0000000000000001L,
    0xC9F6B507AFD5973CL, 0x496764A41E7AE262L, 0x793FCE7E0D3F373AL, 0x2B74AB89A54C3252L, 0x7F6ED30DE9C3357EL, 0x0000000000000001L,
    0x1403F6E0F42B9AB8L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L,
    0xD33747911118BE2CL, 0x3FF5BF3BB6BC6914L, 0xD3BE74FC23A3293AL, 0x0000000000000001L, 0xE797517669FAB57AL, 0x0000000000000001L,
    0x0000000000000001L, 0x28250C903CA466C4L, 0x0000000000000001L, 0x946B1E8578F59788L, 0x2150FF99D9FC9AB4L, 0x0000000000000001L,
    0x9DCEB618E800E134L, 0x71E4B4909AF32DF4L, 0x8D3757F74E1748F2L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L,
    0x138A0CAB0342ACC2L, 0xF50EF3656693DCCAL, 0xC699DE473B75617CL, 0x0000000000000001L, 0xDD7FA35035B9D4AAL, 0x0000000000000001L,
    0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x23117C977E901E58L, 0x0000000000000001L, 0xF1567690692F0FDAL,
    0x0000000000000001L, 0x6327554338A427C2L, 0xC760336934A5BBFCL, 0x0000000000000001L, 0x88F06D2D51339F52L, 0x0D622810903495C2L,
    0x3A8AA48383FDE3AAL, 0xFF555827FFB89886L, 0x658E5CD3DAC68FE0L, 0x0000000000000001L, 0x0C57DE1849DDC298L, 0x424E858A3B615CDEL,
    0x8BE1C3C0567C614EL, 0x8E0CE86C8199042EL, 0x16B615D5713224AAL, 0x3062E4F2076D31E0L, 0x6575505FF8379618L, 0x11712E709F73EC74L,
    0x4CBBFD0C2D69D298L, 0x9E1A664F317F971EL, 0x8995C30A01BF26D2L, 0x0000000000000001L, 0xBF371133FD60D86CL, 0x91701C560B2DF19CL,
    0x30A4C673E187B0A0L, 0xFBFA2D68DAF46584L, 0xB9837C66DCFE1C08L, 0x0000000000000001L, 0x50BE583C5703F3BCL, 0xB9D43B6BD2DCFAE0L,
    0x804F85E1CB7D439EL, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x0E2C9287D19EEC36L, 0xF4AA5D58A8152112L,
    0x9A971EC90C7F7D28L, 0x91742C821A9E25B0L, 0x0000000000000001L, 0x0000000000000001L, 0x506E79B9755DC5D0L, 0x0000000000000001L,
    0xE623D012B4E27DAEL, 0x0000000000000001L, 0x0000000000000001L, 0xC20E0F5D1AD52C96L, 0xA78F436F2FB0BD42L, 0xAB7133FAA36A6CF0L,
    0x021A6E4BB588E134L, 0xA419C34606C90490L, 0x7A0F2FE62A46C83EL, 0x36245F8645728FC0L, 0xB2CC74F1EE79F03EL, 0x8CE4AFD5BA23D0F6L,
    0xD08A460F6DAA2F4EL, 0x54A9F4E31AE02046L, 0x874A742B59E2F25AL, 0x37B1A5F2DCFFDE18L, 0x0000000000000001L, 0x0B385A2899A6DD1AL,
    0x0000000000000001L, 0x0000000000000001L, 0x24625582AD69BFFEL, 0xCC72B532B1024348L, 0x0000000000000001L, 0x0000000000000001L,
    0x0000000000000001L, 0x456FA01F147B68D2L, 0x0000000000000001L, 0x0000000000000001L, 0xC1839C4B1E196E3EL, 0x0000000000000001L,
    0x39CD17508B44ED26L, 0x0000000000000001L, 0x0000000000000001L, 0x1FC57E736C7215BCL, 0x0000000000000001L, 0x0000000000000001L,
    0x0000000000000001L, 0x997223EC2AE1D462L, 0xE2A49DFA3BEA4184L, 0x0000000000000001L, 0x4452A6669EFAE92EL, 0xD2B6966CA4CF25EEL,
    0x196556A4E6E5C848L, 0x0000000000000001L, 0x5FA1B518B4E8D962L, 0xADFD78E7BDE95AA4L, 0x494228B4139F011AL, 0x0000000000000001L,
    0x8B544B97876215F6L, 0x0000000000000001L, 0x0000000000000001L, 0x3C684EA47949D55EL, 0x74B14761B897BE60L, 0x0000000000000001L,
    0x0000000000000001L, 0x416DB66C2BBA44E2L, 0x0000000000000001L, 0x0000000000000001L, 0xE0713F3F4B632D0CL, 0x0000000000000001L,
    0x0EB5B182F930B122L, 0x3C1D726C5A73B55AL, 0x572ED1DA95540D20L, 0xE83116571492E834L, 0xB028E90B3614FE86L, 0x210844D7F1DB63C4L,
    0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x33B4770659E19D78L, 0x73F80BAB33440E4AL, 0x113530B3F755D40EL,
    0xEE1910CCA954C0A6L, 0x0000000000000001L, 0x0000000000000001L, 0x0000000000000001L, 0x561DD690D37989E6L, 0, 1, 1)

  val matching = real filter { expr ⇒ eval(expr, inputs: _*) == outputs } //map { expr ⇒ eval(expr, inputs: _*) } foreach println //filter { _ == outputs }
  //println(outputs)
  matching foreach println
  println(matching.size)

  println(stuff.size)
}
