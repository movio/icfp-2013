import Interpreter._

object OperatorPermuter extends App {

  val ops = List(Shl1(PlaceHolder), Not(PlaceHolder), Shr4(PlaceHolder))

  def perms(partial: List[Expr], ops: List[Expr]): Stream[List[Expr]] = {

    if (ops.isEmpty) Stream(partial)
    else {
      val validOps = ops.distinct.filter { op ⇒ size(op) <= partial.size }

      val nextIter = validOps map {
        case PlaceHolder ⇒ (PlaceHolder :: partial, ops diff List(PlaceHolder))
        case e: Not      ⇒ (Not(partial.head) :: partial.tail, ops diff List(e))
        case e: Shl1     ⇒ (Shl1(partial.head) :: partial.tail, ops diff List(e))
        case e: Shr1     ⇒ (Shr1(partial.head) :: partial.tail, ops diff List(e))
        case e: Shr4     ⇒ (Shr4(partial.head) :: partial.tail, ops diff List(e))
        case e: Shr16    ⇒ (Shr16(partial.head) :: partial.tail, ops diff List(e))

        case e: And ⇒ partial match {
          case e1 :: e2 :: rest ⇒ (And(e1, e2) :: rest, ops diff List(e))
        }
        case e: Or ⇒ partial match {
          case e1 :: e2 :: rest ⇒ (Or(e1, e2) :: rest, ops diff List(e))
        }
        case e: Xor ⇒ partial match {
          case e1 :: e2 :: rest ⇒ (Xor(e1, e2) :: rest, ops diff List(e))
        }
        case e: Plus ⇒ partial match {
          case e1 :: e2 :: rest ⇒ (Plus(e1, e2) :: rest, ops diff List(e))
        }

        case e: If0 ⇒ partial match {
          case e1 :: e2 :: e3 :: rest ⇒ (If0(e1, e2, e3) :: rest, ops diff List(e))
        }

        case e: Fold ⇒ partial match {
          case e1 :: e2 :: e3 :: rest ⇒ (Fold(e1, e2, Lambda2(Id("y"), Id("z"), e3)) :: rest, ops diff List(e))
        }
      }

      nextIter.toStream flatMap {
        case (partial, ops) ⇒
          if (partial.head == PlaceHolder)
            perms(Value(0) :: partial.tail, ops) #:::
              perms(Value(1) :: partial.tail, ops) #:::
              perms(Id("x") :: partial.tail, ops) #:::
              Stream.empty
          else
            perms(partial, ops) #::: Stream.empty
      }
    }
  }

  def size(e: Expr) = e match {
    case PlaceHolder ⇒ 0
    case _: Not      ⇒ 1
    case _: Shl1     ⇒ 1
    case _: Shr1     ⇒ 1
    case _: Shr4     ⇒ 1
    case _: Shr16    ⇒ 1
    case _: And      ⇒ 2
    case _: Or       ⇒ 2
    case _: Xor      ⇒ 2
    case _: Plus     ⇒ 2
    case _: If0      ⇒ 3
    case _: Fold     ⇒ 3 // 3 expressions, so 3, not 4
  }

  println("starting")
  val start = System.nanoTime

  val stuff = perms(Nil,
    List(
      If0(PlaceHolder, PlaceHolder, PlaceHolder),
      Or(PlaceHolder, PlaceHolder),
      Or(PlaceHolder, PlaceHolder),
      Plus(PlaceHolder, PlaceHolder),
      Shr1(PlaceHolder),
      Shr1(PlaceHolder),
      Shl1(PlaceHolder),
      Not(PlaceHolder),
      PlaceHolder,
      PlaceHolder,
      PlaceHolder,
      PlaceHolder,
      PlaceHolder,
      PlaceHolder
    )
  )

  //  val stuff = perms(Nil,
  //    List(
  //      Fold(PlaceHolder, PlaceHolder, Lambda2(Id("y"), Id("z"), PlaceHolder)),
  //      Xor(PlaceHolder, PlaceHolder),
  //      Shl1(PlaceHolder),
  //      Shr16(PlaceHolder),
  //      Shr16(PlaceHolder),
  //      Shr4(PlaceHolder),
  //      Shr4(PlaceHolder),
  //      PlaceHolder,
  //      PlaceHolder,
  //      PlaceHolder,
  //      PlaceHolder
  //    )
  //  )

  //stuff foreach println
  val real = stuff map { list ⇒ Lambda1(Id("x"), list.head) }
  val duration = System.nanoTime - start
  println(f"duration: ${duration / 1000000.0}%.02fms")

  println("running test program")

  val inputs = List(0x55c3aedf9535800aL, 0x32bd8b75dd380d89L, 0xc49a91000a3685adL, 0x6384ffa070280b2dL, 0x6d7766201c1f3b88L,
    0xf650b5fc4cc34325L, 0x3f74b1eb3f2e93cfL, 0xcae6d8a335b4820fL, 0x2dc29af3a403523L, 0xc7f15889d1b0eeacL, 0x1180c262f16c0a48L,
    0xdf9d52c760702b2L, 0x449d1aeb6fe2991bL, 0xe149da64f8e3bcdfL, 0x29b7c698b1c354c2L, 0x7f698a13cf06051L, 0x68233bf6e0c95f25L,
    0xc42d7b34ef3c5514L, 0x1dc76bc2a37e6d9cL, 0x3449410c538bfdfcL, 0xa83f443a3d6ac4e8L, 0x8d7b86635e97b5L, 0x1f34a4993ab48067L,
    0x43e0979bae8a7518L, 0xca8984e05a0f9883L, 0x57bad546aa702cbfL, 0x328555d830035c6bL, 0xe02d12193ba8bdbL, 0x6629dd575da15305L,
    0x43f6844cefaa6244L, 0x9c4312c22614b723L, 0x11c9de94a24a7bd1L, 0xaf9bfd4213102f4L, 0x9925ed097d95ae9L, 0x5fe8e99ce0993ebcL,
    0x7fa94d8e1e7b885aL, 0x943245cbb08106c7L, 0x1d247dee4b228c69L, 0x5d0e403077a37c9bL, 0x8c9fb8cc7ec1e529L, 0x6618547adb1b976cL,
    0xd88f362448ac8e10L, 0xf60c048a58c87d4L, 0xa2f5c8b23d8aecc6L, 0x1258d1606cc022c3L, 0x2edf9fd7c1023740L, 0x363f543928cc87b3L,
    0xdeacc3c46023a70dL, 0xe306e6bef3317620L, 0x4d44afd1f54b0defL, 0xb108335536710637L, 0x25feaf2df8799fadL, 0x186e581deeaeb8cdL,
    0xdda0dfbcc2b30527L, 0xad6bfe77251b1292L, 0x1891ff3d24b00cabL, 0x3a2be6c7e9a13686L, 0xed7866aa129b8b86L, 0xdd57ec7bcbaf33aaL,
    0x242d7e2b4c344dcL, 0xb83dc64d3b48f9fbL, 0x523e018d616fe9bcL, 0xca4906c38a212a9bL, 0xf8a3dd36abb4866eL, 0x3cfe210028723751L,
    0xc2404bbf2f36f10fL, 0x841a75b496058533L, 0x4c9893f346f80d5fL, 0x7d39ac76ac7d86a1L, 0xbfb9a779b63bf9d9L, 0xd9a0dd37efd30075L,
    0x83ab51f5141f7a04L, 0x7d44e0f7444ee78L, 0xe1c4b65fb5693209L, 0x1a4c93a58fdbb17L, 0x1f00bebde1fa8784L, 0x92adcf667ba7be56L,
    0xfd3761f5752d3b9eL, 0x1b0e2a2cbe563803L, 0x900ae3f607a8125bL, 0x86b8a2df4dc7392fL, 0x2da674206f061b30L, 0x3352e183cd5630daL,
    0xdd5dcde591516ed8L, 0x1974b8211f3e0fedL, 0xc513bfae290b7667L, 0x927a5e39d645386cL, 0xa447bbfc5f8a0f9fL, 0x16406097d8dcabebL,
    0xb708d8cee8122281L, 0xe448494bb05f2d41L, 0x560ee14b2b8d7c27L, 0x963143f2b0b4497bL, 0x2a205d96d44302d0L, 0x7660423a10667c13L,
    0xc9f6b507afd5973cL, 0x496764a41e7ae262L, 0x793fce7e0d3f373aL, 0x2b74ab89a54c3252L, 0x7f6ed30de9c3357eL, 0xa10c3462cf91e857L,
    0x1403f6e0f42b9ab8L, 0xf3d2874559d7e09fL, 0x360d6c5a865303e1L, 0x1d6fb8abbe39cf87L, 0x5c21e57ea33d91d7L, 0x93dc63794d794d51L,
    0xd33747911118be2cL, 0x3ff5bf3bb6bc6914L, 0xd3be74fc23a3293aL, 0x414656b571adf6f3L, 0xe797517669fab57aL, 0x24c5229764980d91L,
    0xaefe646173e08415L, 0x28250c903ca466c4L, 0x88c7bd745b67a6bbL, 0x946b1e8578f59788L, 0x2150ff99d9fc9ab4L, 0x3921e2218d075335L,
    0x9dceb618e800e134L, 0x71e4b4909af32df4L, 0x8d3757f74e1748f2L, 0xba661287ae1a926fL, 0x2f509d980bf2bcfbL, 0xc5c02088998ddec7L,
    0x138a0cab0342acc2L, 0xf50ef3656693dccaL, 0xc699de473b75617cL, 0x4b485d00c6340965L, 0xdd7fa35035b9d4aaL, 0x13d415c1fd95f57L,
    0x68e24b1edd2fdbf7L, 0x50ecb7d0764a9927L, 0xe2f570616ecebe43L, 0x23117c977e901e58L, 0x466c103f5c7785ffL, 0xf1567690692f0fdaL,
    0xdcbd0fbf6029a4bbL, 0x6327554338a427c2L, 0xc760336934a5bbfcL, 0x26de8b223780603dL, 0x88f06d2d51339f52L, 0xd622810903495c2L,
    0x3a8aa48383fde3aaL, 0xff555827ffb89886L, 0x658e5cd3dac68fe0L, 0x891c8ab69e0d6135L, 0xc57de1849ddc298L, 0x424e858a3b615cdeL,
    0x8be1c3c0567c614eL, 0x8e0ce86c8199042eL, 0x16b615d5713224aaL, 0x3062e4f2076d31e0L, 0x6575505ff8379618L, 0x11712e709f73ec74L,
    0x4cbbfd0c2d69d298L, 0x9e1a664f317f971eL, 0x8995c30a01bf26d2L, 0x67538883530bbe01L, 0xbf371133fd60d86cL, 0x91701c560b2df19cL,
    0x30a4c673e187b0a0L, 0xfbfa2d68daf46584L, 0xb9837c66dcfe1c08L, 0xb52250fc5b834653L, 0x50be583c5703f3bcL, 0xb9d43b6bd2dcfae0L,
    0x804f85e1cb7d439eL, 0x6940a9fcc650c4afL, 0xa572c161e816a1f3L, 0xa875a4da414e73abL, 0xe2c9287d19eec36L, 0xf4aa5d58a8152112L,
    0x9a971ec90c7f7d28L, 0x91742c821a9e25b0L, 0x40fb5602039302bL, 0x5f6e75d0b484bf4fL, 0x506e79b9755dc5d0L, 0x8037723b1dbe196dL,
    0xe623d012b4e27daeL, 0xca40276d9cfcad2fL, 0xb5ad705fc021f975L, 0xc20e0f5d1ad52c96L, 0xa78f436f2fb0bd42L, 0xab7133faa36a6cf0L,
    0x21a6e4bb588e134L, 0xa419c34606c90490L, 0x7a0f2fe62a46c83eL, 0x36245f8645728fc0L, 0xb2cc74f1ee79f03eL, 0x8ce4afd5ba23d0f6L,
    0xd08a460f6daa2f4eL, 0x54a9f4e31ae02046L, 0x874a742b59e2f25aL, 0x37b1a5f2dcffde18L, 0x85fd2723d99b50f3L, 0xb385a2899a6dd1aL,
    0xe50d32b1a7eb0a61L, 0xc7d982064ce2f777L, 0x24625582ad69bffeL, 0xcc72b532b1024348L, 0x7525c6a7101700c1L, 0x22c7987d3cb39a4bL,
    0x5977b52e277efa19L, 0x456fa01f147b68d2L, 0xc60a9e0f4138e1fbL, 0x7f6732476a31f7fdL, 0xc1839c4b1e196e3eL, 0x6b31edd29edfa72bL,
    0x39cd17508b44ed26L, 0x6214195b079ec8adL, 0x527b73a448f1d33dL, 0x1fc57e736c7215bcL, 0x8f39a9ba7c65d269L, 0x4c6035316379edadL,
    0xdc2de72770c4ce3bL, 0x997223ec2ae1d462L, 0xe2a49dfa3bea4184L, 0x40403746eb82e403L, 0x4452a6669efae92eL, 0xd2b6966ca4cf25eeL,
    0x196556a4e6e5c848L, 0xd671579ce36506ebL, 0x5fa1b518b4e8d962L, 0xadfd78e7bde95aa4L, 0x494228b4139f011aL, 0x102a21390ab9a253L,
    0x8b544b97876215f6L, 0x243e6d95ebef8abdL, 0xd34ec4016a251175L, 0x3c684ea47949d55eL, 0x74b14761b897be60L, 0xc9fd3a6fb81e20e5L,
    0x97ff2bcdf1a67865L, 0x416db66c2bba44e2L, 0xce872b990f7dd0e5L, 0x3258fdb6fbd334bdL, 0xe0713f3f4b632d0cL, 0x5b3e47a0160a9de9L,
    0xeb5b182f930b122L, 0x3c1d726c5a73b55aL, 0x572ed1da95540d20L, 0xe83116571492e834L, 0xb028e90b3614fe86L, 0x210844d7f1db63c4L,
    0xb0ea540f17e19b6bL, 0x2ce67828bf68a8b3L, 0xdfe7e93d71abbad5L, 0x33b4770659e19d78L, 0x73f80bab33440e4aL, 0x113530b3f755d40eL,
    0xee1910cca954c0a6L, 0x94ddd543d2bcf6e7L, 0xa385dc633a66ae2fL, 0xb7e0ae17fecb911fL, 0x561dd690d37989e6L, 0, 1, 0xFFFFFFFFFFFFFFFFL)

  val outputs = List(0xAB875DBF2A6B0014L, 0x657B16EBBA701B12L, 0x89352200146D0B5AL, 0xC709FF40E050165AL, 0xDAEECC40383E7710L,
    0xECA16BF89986864AL, 0x7EE963D67E5D279EL, 0x95CDB1466B69041EL, 0x05B8535E74806A46L, 0x8FE2B113A361DD58L, 0x230184C5E2D81490L,
    0x1BF3AA58EC0E0564L, 0x893A35D6DFC53236L, 0xC293B4C9F1C779BEL, 0x536F8D316386A984L, 0x0FED314279E0C0A2L, 0xD04677EDC192BE4AL,
    0x885AF669DE78AA28L, 0x3B8ED78546FCDB38L, 0x68928218A717FBF8L, 0x507E88747AD589D0L, 0x011AF70CC6BD2F6AL, 0x3E694932756900CEL,
    0x87C12F375D14EA30L, 0x951309C0B41F3106L, 0xAF75AA8D54E0597EL, 0x650AABB06006B8D6L, 0x1C05A243277517B6L, 0xCC53BAAEBB42A60AL,
    0x87ED0899DF54C488L, 0x388625844C296E46L, 0x2393BD294494F7A2L, 0x15F37FA8426205E8L, 0x1324BDA12FB2B5D2L, 0xBFD1D339C1327D78L,
    0xFF529B1C3CF710B4L, 0x28648B9761020D8EL, 0x3A48FBDC964518D2L, 0xBA1C8060EF46F936L, 0x193F7198FD83CA52L, 0xCC30A8F5B6372ED8L,
    0xB11E6C4891591C20L, 0x1EC180914B190FA8L, 0x45EB91647B15D98CL, 0x24B1A2C0D9804586L, 0x5DBF3FAF82046E80L, 0x6C7EA87251990F66L,
    0xBD598788C0474E1AL, 0xC60DCD7DE662EC40L, 0x9A895FA3EA961BDEL, 0x621066AA6CE20C6EL, 0x4BFD5E5BF0F33F5AL, 0x30DCB03BDD5D719AL,
    0xBB41BF7985660A4EL, 0x5AD7FCEE4A362524L, 0x3123FE7A49601956L, 0x7457CD8FD3426D0CL, 0xDAF0CD542537170CL, 0xBAAFD8F7975E6754L,
    0x0485AFC5698689B8L, 0x707B8C9A7691F3F6L, 0xA47C031AC2DFD378L, 0x94920D8714425536L, 0xF147BA6D57690CDCL, 0x79FC420050E46EA2L,
    0x8480977E5E6DE21EL, 0x0834EB692C0B0A66L, 0x993127E68DF01ABEL, 0xFA7358ED58FB0D42L, 0x7F734EF36C77F3B2L, 0xB341BA6FDFA600EAL,
    0x0756A3EA283EF408L, 0x0FA89C1EE889DCF0L, 0xC3896CBF6AD26412L, 0x03499274B1FB762EL, 0x3E017D7BC3F50F08L, 0x255B9ECCF74F7CACL,
    0xFA6EC3EAEA5A773CL, 0x361C54597CAC7006L, 0x2015C7EC0F5024B6L, 0x0D7145BE9B8E725EL, 0x5B4CE840DE0C3660L, 0x66A5C3079AAC61B4L,
    0xBABB9BCB22A2DDB0L, 0x32E970423E7C1FDAL, 0x8A277F5C5216ECCEL, 0x24F4BC73AC8A70D8L, 0x488F77F8BF141F3EL, 0x2C80C12FB1B957D6L,
    0x6E11B19DD0244502L, 0xC890929760BE5A82L, 0xAC1DC296571AF84EL, 0x2C6287E5616892F6L, 0x5440BB2DA88605A0L, 0xECC0847420CCF826L,
    0x93ED6A0F5FAB2E78L, 0x92CEC9483CF5C4C4L, 0xF27F9CFC1A7E6E74L, 0x56E957134A9864A4L, 0xFEDDA61BD3866AFCL, 0x421868C59F23D0AEL,
    0x2807EDC1E8573570L, 0xE7A50E8AB3AFC13EL, 0x6C1AD8B50CA607C2L, 0x3ADF71577C739F0EL, 0xB843CAFD467B23AEL, 0x27B8C6F29AF29AA2L,
    0xA66E8F2222317C58L, 0x7FEB7E776D78D228L, 0xA77CE9F847465274L, 0x828CAD6AE35BEDE6L, 0xCF2EA2ECD3F56AF4L, 0x498A452EC9301B22L,
    0x5DFCC8C2E7C1082AL, 0x504A19207948CD88L, 0x118F7AE8B6CF4D76L, 0x28D63D0AF1EB2F10L, 0x42A1FF33B3F93568L, 0x7243C4431A0EA66AL,
    0x3B9D6C31D001C268L, 0xE3C9692135E65BE8L, 0x1A6EAFEE9C2E91E4L, 0x74CC250F5C3524DEL, 0x5EA13B3017E579F6L, 0x8B804111331BBD8EL,
    0x2714195606855984L, 0xEA1DE6CACD27B994L, 0x8D33BC8E76EAC2F8L, 0x9690BA018C6812CAL, 0xBAFF46A06B73A954L, 0x027A82B83FB2BEAEL,
    0xD1C4963DBA5FB7EEL, 0xA1D96FA0EC95324EL, 0xC5EAE0C2DD9D7C86L, 0x4622F92EFD203CB0L, 0x8CD8207EB8EF0BFEL, 0xE2ACED20D25E1FB4L,
    0xB97A1F7EC0534976L, 0xC64EAA8671484F84L, 0x8EC066D2694B77F8L, 0x4DBD16446F00C07AL, 0x11E0DA5AA2673EA4L, 0x1AC4502120692B84L,
    0x7515490707FBC754L, 0xFEAAB04FFF71310CL, 0xCB1CB9A7B58D1FC0L, 0x1239156D3C1AC26AL, 0x18AFBC3093BB8530L, 0x849D0B1476C2B9BCL,
    0x17C38780ACF8C29CL, 0x1C19D0D90332085CL, 0x2D6C2BAAE2644954L, 0x60C5C9E40EDA63C0L, 0xCAEAA0BFF06F2C30L, 0x22E25CE13EE7D8E8L,
    0x9977FA185AD3A530L, 0x3C34CC9E62FF2E3CL, 0x132B8614037E4DA4L, 0xCEA71106A6177C02L, 0x7E6E2267FAC1B0D8L, 0x22E038AC165BE338L,
    0x61498CE7C30F6140L, 0xF7F45AD1B5E8CB08L, 0x7306F8CDB9FC3810L, 0x6A44A1F8B7068CA6L, 0xA17CB078AE07E778L, 0x73A876D7A5B9F5C0L,
    0x009F0BC396FA873CL, 0xD28153F98CA1895EL, 0x4AE582C3D02D43E6L, 0x50EB49B4829CE756L, 0x1C59250FA33DD86CL, 0xE954BAB1502A4224L,
    0x352E3D9218FEFA50L, 0x22E85904353C4B60L, 0x081F6AC040726056L, 0xBEDCEBA169097E9EL, 0xA0DCF372EABB8BA0L, 0x006EE4763B7C32DAL,
    0xCC47A02569C4FB5CL, 0x94804EDB39F95A5EL, 0x6B5AE0BF8043F2EAL, 0x841C1EBA35AA592CL, 0x4F1E86DE5F617A84L, 0x56E267F546D4D9E0L,
    0x0434DC976B11C268L, 0x4833868C0D920920L, 0xF41E5FCC548D907CL, 0x6C48BF0C8AE51F80L, 0x6598E9E3DCF3E07CL, 0x19C95FAB7447A1ECL,
    0xA1148C1EDB545E9CL, 0xA953E9C635C0408CL, 0x0E94E856B3C5E4B4L, 0x6F634BE5B9FFBC30L, 0x0BFA4E47B336A1E6L, 0x1670B451334DBA34L,
    0xCA1A65634FD614C2L, 0x8FB3040C99C5EEEEL, 0x48C4AB055AD37FFCL, 0x98E56A6562048690L, 0xEA4B8D4E202E0182L, 0x458F30FA79673496L,
    0xB2EF6A5C4EFDF432L, 0x8ADF403E28F6D1A4L, 0x8C153C1E8271C3F6L, 0xFECE648ED463EFFAL, 0x830738963C32DC7CL, 0xD663DBA53DBF4E56L,
    0x739A2EA11689DA4CL, 0xC42832B60F3D915AL, 0xA4F6E74891E3A67AL, 0x3F8AFCE6D8E42B78L, 0x1E735374F8CBA4D2L, 0x98C06A62C6F3DB5AL,
    0xB85BCE4EE1899C76L, 0x32E447D855C3A8C4L, 0xC5493BF477D48308L, 0x80806E8DD705C806L, 0x88A54CCD3DF5D25CL, 0xA56D2CD9499E4BDCL,
    0x32CAAD49CDCB9090L, 0xACE2AF39C6CA0DD6L, 0xBF436A3169D1B2C4L, 0x5BFAF1CF7BD2B548L, 0x92845168273E0234L, 0x20544272157344A6L,
    0x16A8972F0EC42BECL, 0x487CDB2BD7DF157AL, 0xA69D8802D44A22EAL, 0x78D09D48F293AABCL, 0xE9628EC3712F7CC0L, 0x93FA74DF703C41CAL,
    0x2FFE579BE34CF0CAL, 0x82DB6CD8577489C4L, 0x9D0E57321EFBA1CAL, 0x64B1FB6DF7A6697AL, 0xC0E27E7E96C65A18L, 0xB67C8F402C153BD2L,
    0x1D6B6305F2616244L, 0x783AE4D8B4E76AB4L, 0xAE5DA3B52AA81A40L, 0xD0622CAE2925D068L, 0x6051D2166C29FD0CL, 0x421089AFE3B6C788L,
    0x61D4A81E2FC336D6L, 0x59CCF0517ED15166L, 0xBFCFD27AE35775AAL, 0x6768EE0CB3C33AF0L, 0xE7F0175666881C94L, 0x226A6167EEABA81CL,
    0xDC32219952A9814CL, 0x29BBAA87A579EDCEL, 0x470BB8C674CD5C5EL, 0x6FC15C2FFD97223EL, 0xAC3BAD21A6F313CCL)

  val matching = real filter { expr ⇒ eval(expr, inputs: _*) == outputs } //map { expr ⇒ eval(expr, inputs: _*) } foreach println //filter { _ == outputs }
  //println(outputs)
  matching foreach println
  println(matching.size)

  println(stuff.size)
}
